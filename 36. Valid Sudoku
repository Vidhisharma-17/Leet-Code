class Solution {
public:
    bool isValidSudoku(vector<vector<char>>& board) {
        unordered_set<string> st;  // Declare the set to track the entries
        
        for (int i = 0; i < 9; i++) {
            for (int j = 0; j < 9; j++) {
                if (board[i][j] == '.') continue;  // Skip empty cells
                
                // Create unique identifiers for row, column, and box
                string row = string(1, board[i][j]) + "_ROW_" + to_string(i);
                string col = string(1, board[i][j]) + "_COL_" + to_string(j);
                string box = string(1, board[i][j]) + "_BOX_" + to_string(i / 3) + "_" + to_string(j / 3);
                
                // Check if the number is already seen in the current row, column, or box
                if (st.find(row) != st.end() || st.find(col) != st.end() || st.find(box) != st.end())
                    return false;  // Invalid Sudoku board
                
                // Insert the number into the set
                st.insert(row);
                st.insert(col);
                st.insert(box);
            }
        }
        
        return true;  // If no conflicts are found, the board is valid
    }
};

